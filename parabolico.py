# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _parabolico
else:
    import _parabolico

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _parabolico.delete_SwigPyIterator

    def value(self):
        return _parabolico.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _parabolico.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _parabolico.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _parabolico.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _parabolico.SwigPyIterator_equal(self, x)

    def copy(self):
        return _parabolico.SwigPyIterator_copy(self)

    def next(self):
        return _parabolico.SwigPyIterator_next(self)

    def __next__(self):
        return _parabolico.SwigPyIterator___next__(self)

    def previous(self):
        return _parabolico.SwigPyIterator_previous(self)

    def advance(self, n):
        return _parabolico.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _parabolico.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _parabolico.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _parabolico.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _parabolico.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _parabolico.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _parabolico.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _parabolico:
_parabolico.SwigPyIterator_swigregister(SwigPyIterator)

class Objeto(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d = property(_parabolico.Objeto_d_get, _parabolico.Objeto_d_set)
    v0 = property(_parabolico.Objeto_v0_get, _parabolico.Objeto_v0_set)
    x0 = property(_parabolico.Objeto_x0_get, _parabolico.Objeto_x0_set)
    h = property(_parabolico.Objeto_h_get, _parabolico.Objeto_h_set)
    alpha = property(_parabolico.Objeto_alpha_get, _parabolico.Objeto_alpha_set)
    d_dir = property(_parabolico.Objeto_d_dir_get, _parabolico.Objeto_d_dir_set)

    def __init__(self, *args):
        _parabolico.Objeto_swiginit(self, _parabolico.new_Objeto(*args))
    __swig_destroy__ = _parabolico.delete_Objeto

# Register Objeto in _parabolico:
_parabolico.Objeto_swigregister(Objeto)

class Simulador(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, g):
        _parabolico.Simulador_swiginit(self, _parabolico.new_Simulador(g))

    def run(self, objetos):
        return _parabolico.Simulador_run(self, objetos)

    def collide(self, o1, o2):
        return _parabolico.Simulador_collide(self, o1, o2)

    def distance(self, o1):
        return _parabolico.Simulador_distance(self, o1)
    __swig_destroy__ = _parabolico.delete_Simulador

# Register Simulador in _parabolico:
_parabolico.Simulador_swigregister(Simulador)

class VectorObjeto(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _parabolico.VectorObjeto_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _parabolico.VectorObjeto___nonzero__(self)

    def __bool__(self):
        return _parabolico.VectorObjeto___bool__(self)

    def __len__(self):
        return _parabolico.VectorObjeto___len__(self)

    def __getslice__(self, i, j):
        return _parabolico.VectorObjeto___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _parabolico.VectorObjeto___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _parabolico.VectorObjeto___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _parabolico.VectorObjeto___delitem__(self, *args)

    def __getitem__(self, *args):
        return _parabolico.VectorObjeto___getitem__(self, *args)

    def __setitem__(self, *args):
        return _parabolico.VectorObjeto___setitem__(self, *args)

    def pop(self):
        return _parabolico.VectorObjeto_pop(self)

    def append(self, x):
        return _parabolico.VectorObjeto_append(self, x)

    def empty(self):
        return _parabolico.VectorObjeto_empty(self)

    def size(self):
        return _parabolico.VectorObjeto_size(self)

    def swap(self, v):
        return _parabolico.VectorObjeto_swap(self, v)

    def begin(self):
        return _parabolico.VectorObjeto_begin(self)

    def end(self):
        return _parabolico.VectorObjeto_end(self)

    def rbegin(self):
        return _parabolico.VectorObjeto_rbegin(self)

    def rend(self):
        return _parabolico.VectorObjeto_rend(self)

    def clear(self):
        return _parabolico.VectorObjeto_clear(self)

    def get_allocator(self):
        return _parabolico.VectorObjeto_get_allocator(self)

    def pop_back(self):
        return _parabolico.VectorObjeto_pop_back(self)

    def erase(self, *args):
        return _parabolico.VectorObjeto_erase(self, *args)

    def __init__(self, *args):
        _parabolico.VectorObjeto_swiginit(self, _parabolico.new_VectorObjeto(*args))

    def push_back(self, x):
        return _parabolico.VectorObjeto_push_back(self, x)

    def front(self):
        return _parabolico.VectorObjeto_front(self)

    def back(self):
        return _parabolico.VectorObjeto_back(self)

    def assign(self, n, x):
        return _parabolico.VectorObjeto_assign(self, n, x)

    def resize(self, *args):
        return _parabolico.VectorObjeto_resize(self, *args)

    def insert(self, *args):
        return _parabolico.VectorObjeto_insert(self, *args)

    def reserve(self, n):
        return _parabolico.VectorObjeto_reserve(self, n)

    def capacity(self):
        return _parabolico.VectorObjeto_capacity(self)
    __swig_destroy__ = _parabolico.delete_VectorObjeto

# Register VectorObjeto in _parabolico:
_parabolico.VectorObjeto_swigregister(VectorObjeto)



